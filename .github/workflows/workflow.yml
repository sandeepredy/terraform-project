name: 'CICD terraform-project'

on:
  push:
    branches:
      - 'main'
    paths:
      - 'terraform/**'
      - 'pythonapi/**'

concurrency: ${{ github.repository }}

jobs:
  ep1_cicd:
    name: 'CICD Jobs to create Infrastructure'
    runs-on: 'ubuntu-latest'

    steps:

      - name: GIT Checkout
        id: 'git-checkout'
        uses: "actions/checkout@v4"

      - name: Terraform Init
        id: 'tf-init'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_KEY }}
        run: |
          cd ./terraform
          terraform init
          pwd

      - name: Terraform Plan
        id: 'tf-plan'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_KEY }}
        run: |
          cd ./terraform
          terraform plan

      - name: Terraform Apply
        id: 'tf-apply'
        if: |
          github.ref == 'refs/heads/main'
        env:
          GOOGLE_CREDENTIALS: ${{secrets.TERRAFORM_KEY}}
        run: |
          cd ./terraform
          terraform apply --auto-approve
# Get Instance IPs
      - name: Get instance IPs
#run: echo "::set-output name=instance_ips::$(terraform output -json instance_ips | jq -r '.value[]')"
        run: echo "::set-output name=instance_ips::$(terraform output -json instance_ips | jq -r '.value[]')"
# SSH into VMs and Run docker container  
      
      - name: SSH into VMs and Run Container
        uses: appleboy/ssh-action@master
        with:
            host: ${{ steps.get_ips.outputs.instance_ips }}
            username: admin
            port: 22
            key: ${{ secrets.TERRAFORM_KEY}}
            script: |
              scp -r ./pythonapi private-vm:/tmp
              gcloud config set project alert-flames-276807
              ssh -o StrictHostKeyChecking=no -i ${{ secrets.TERRAFORM_KEY }} private-vm@${{ steps.get_ips.outputs.instance_ips }} 
            
              cd ./tmp
                
              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
                
              echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              docker --version
              docker build -t mypythonapi .
              docker images
              docker run -d -p 3000:3000 mypythonapi
              docker ps

        
